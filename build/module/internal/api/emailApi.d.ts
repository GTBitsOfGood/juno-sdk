/**
 * Juno
 * Juno Public API Docs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { RegisterDomainModel } from '../model/registerDomainModel';
import { RegisterDomainResponse } from '../model/registerDomainResponse';
import { RegisterEmailModel } from '../model/registerEmailModel';
import { RegisterEmailResponse } from '../model/registerEmailResponse';
import { SendEmailModel } from '../model/sendEmailModel';
import { SendEmailResponse } from '../model/sendEmailResponse';
import { SetupEmailServiceModel } from '../model/setupEmailServiceModel';
import { VerifyDomainModel } from '../model/verifyDomainModel';
import { Authentication, Interceptor } from '../model/models';
import { HttpBearerAuth } from '../model/models';
export declare enum EmailApiApiKeys {
}
export declare class EmailApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        API_Key: HttpBearerAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: EmailApiApiKeys, value: string): void;
    set accessToken(accessToken: string | (() => string));
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Registers a sender domain.
     * @param registerDomainModel
     */
    emailControllerRegisterEmailDomain(registerDomainModel: RegisterDomainModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RegisterDomainResponse;
    }>;
    /**
     *
     * @summary Registers a sender email address.
     * @param registerEmailModel
     */
    emailControllerRegisterSenderAddress(registerEmailModel: RegisterEmailModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RegisterEmailResponse;
    }>;
    /**
     *
     * @summary Sends an email using Juno services.
     * @param sendEmailModel
     */
    emailControllerSendEmail(sendEmailModel: SendEmailModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SendEmailResponse;
    }>;
    /**
     *
     * @summary Sets up an email service with the given Sendgrid API Key
     * @param setupEmailServiceModel
     */
    emailControllerSetup(setupEmailServiceModel: SetupEmailServiceModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Verifies a sender domain registration status.
     * @param verifyDomainModel
     */
    emailControllerVerifySenderDomain(verifyDomainModel: VerifyDomainModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RegisterDomainResponse;
    }>;
}
