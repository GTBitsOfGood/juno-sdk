/**
 * Juno
 * Juno Public API Docs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { CreateProjectModel } from '../model/createProjectModel';
import { LinkUserModel } from '../model/linkUserModel';
import { ProjectResponse } from '../model/projectResponse';
import { Authentication, Interceptor } from '../model/models';
import { HttpBearerAuth } from '../model/models';
export declare enum ProjectApiApiKeys {
}
export declare class ProjectApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        API_Key: HttpBearerAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ProjectApiApiKeys, value: string): void;
    set accessToken(accessToken: string | (() => string));
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Creates a new project with the specified parameters.
     * @param xUserPassword Password of the admin or superadmin user
     * @param xUserEmail Email of an admin or superadmin user
     * @param createProjectModel
     */
    projectControllerCreateProject(xUserPassword: string, xUserEmail: string, createProjectModel: CreateProjectModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProjectResponse;
    }>;
    /**
     *
     * @summary Retrieves a project by its unique ID.
     * @param id
     */
    projectControllerGetProjectById(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProjectResponse;
    }>;
    /**
     *
     * @summary Retrieves a project by its unique name.
     * @param name
     */
    projectControllerGetProjectByName(name: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProjectResponse;
    }>;
    /**
     *
     * @summary Links a specified user with a given project ID.
     * @param id
     * @param linkUserModel
     */
    projectControllerLinkUserWithProjectId(id: number, linkUserModel: LinkUserModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Links a specified user with a given project name.
     * @param name
     * @param linkUserModel
     */
    projectControllerLinkUserWithProjectName(name: string, linkUserModel: LinkUserModel, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
