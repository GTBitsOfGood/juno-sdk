"use strict";
/**
 * Juno
 * Juno Public API Docs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = exports.UserApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const models_2 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'http://localhost';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var UserApiApiKeys;
(function (UserApiApiKeys) {
})(UserApiApiKeys = exports.UserApiApiKeys || (exports.UserApiApiKeys = {}));
class UserApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'API_Key': new models_2.HttpBearerAuth(),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[UserApiApiKeys[key]].apiKey = value;
    }
    set accessToken(accessToken) {
        this.authentications.API_Key.accessToken = accessToken;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     *
     * @summary Create a new user.
     * @param xUserPassword Password of the admin or superadmin user
     * @param xUserEmail Email of an admin or superadmin user
     * @param createUserModel The user details
     */
    async userControllerCreateUser(xUserPassword, xUserEmail, createUserModel, options = { headers: {} }) {
        const localVarPath = this.basePath + '/user';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'xUserPassword' is not null or undefined
        if (xUserPassword === null || xUserPassword === undefined) {
            throw new Error('Required parameter xUserPassword was null or undefined when calling userControllerCreateUser.');
        }
        // verify required parameter 'xUserEmail' is not null or undefined
        if (xUserEmail === null || xUserEmail === undefined) {
            throw new Error('Required parameter xUserEmail was null or undefined when calling userControllerCreateUser.');
        }
        // verify required parameter 'createUserModel' is not null or undefined
        if (createUserModel === null || createUserModel === undefined) {
            throw new Error('Required parameter createUserModel was null or undefined when calling userControllerCreateUser.');
        }
        localVarHeaderParams['X-User-Password'] = models_1.ObjectSerializer.serialize(xUserPassword, "string");
        localVarHeaderParams['X-User-Email'] = models_1.ObjectSerializer.serialize(xUserEmail, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(createUserModel, "CreateUserModel")
        };
        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "UserResponse");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *
     * @summary Retrieve an existing user.
     * @param id The unique identifier of the user
     */
    async userControllerGetUserById(id, options = { headers: {} }) {
        const localVarPath = this.basePath + '/user/id/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userControllerGetUserById.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "UserResponse");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Associates a user with a project ID.
     * @summary Link user to project.
     * @param id User ID being linked to a project
     * @param xUserPassword Password of the admin or superadmin user
     * @param xUserEmail Email of an admin or superadmin user
     * @param linkProjectModel Project details to link with the user
     */
    async userControllerLinkUserWithProjectId(id, xUserPassword, xUserEmail, linkProjectModel, options = { headers: {} }) {
        const localVarPath = this.basePath + '/user/id/{id}/project'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userControllerLinkUserWithProjectId.');
        }
        // verify required parameter 'xUserPassword' is not null or undefined
        if (xUserPassword === null || xUserPassword === undefined) {
            throw new Error('Required parameter xUserPassword was null or undefined when calling userControllerLinkUserWithProjectId.');
        }
        // verify required parameter 'xUserEmail' is not null or undefined
        if (xUserEmail === null || xUserEmail === undefined) {
            throw new Error('Required parameter xUserEmail was null or undefined when calling userControllerLinkUserWithProjectId.');
        }
        // verify required parameter 'linkProjectModel' is not null or undefined
        if (linkProjectModel === null || linkProjectModel === undefined) {
            throw new Error('Required parameter linkProjectModel was null or undefined when calling userControllerLinkUserWithProjectId.');
        }
        localVarHeaderParams['X-User-Password'] = models_1.ObjectSerializer.serialize(xUserPassword, "string");
        localVarHeaderParams['X-User-Email'] = models_1.ObjectSerializer.serialize(xUserEmail, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(linkProjectModel, "LinkProjectModel")
        };
        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Updates the user type for an existing user. User type can be thought of as a role with role-based permissions, e.g. SUPERADMIN could have permissions an ADMIN would not. Only SUPERADMIN users can set types
     * @summary Update user type.
     * @param xUserPassword Password of the admin or superadmin user
     * @param xUserEmail Email of an admin or superadmin user
     * @param setUserTypeModel User ID, email, and the new type to be set
     */
    async userControllerSetUserType(xUserPassword, xUserEmail, setUserTypeModel, options = { headers: {} }) {
        const localVarPath = this.basePath + '/user/type';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'xUserPassword' is not null or undefined
        if (xUserPassword === null || xUserPassword === undefined) {
            throw new Error('Required parameter xUserPassword was null or undefined when calling userControllerSetUserType.');
        }
        // verify required parameter 'xUserEmail' is not null or undefined
        if (xUserEmail === null || xUserEmail === undefined) {
            throw new Error('Required parameter xUserEmail was null or undefined when calling userControllerSetUserType.');
        }
        // verify required parameter 'setUserTypeModel' is not null or undefined
        if (setUserTypeModel === null || setUserTypeModel === undefined) {
            throw new Error('Required parameter setUserTypeModel was null or undefined when calling userControllerSetUserType.');
        }
        localVarHeaderParams['X-User-Password'] = models_1.ObjectSerializer.serialize(xUserPassword, "string");
        localVarHeaderParams['X-User-Email'] = models_1.ObjectSerializer.serialize(xUserEmail, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(setUserTypeModel, "SetUserTypeModel")
        };
        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "UserResponse");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
exports.UserApi = UserApi;
//# sourceMappingURL=data:application/json;base64,